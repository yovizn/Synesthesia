generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                                   String         @id
  imageId                              String?
  firstname                            String
  lastname                             String?
  username                             String         @unique
  email                                String         @unique
  password                             String
  birth                                DateTime?
  gender                               Gender
  address                              String?
  referral                             String         @unique
  referrance                           String?
  point                                Int            @default(0)
  phoneNumber                          String?        @map("phone_number")
  expPoint                             DateTime?      @map("exp_point")
  isVerified                           Boolean        @default(false)
  isDelete                             Boolean        @default(false)
  createdAt                            DateTime       @default(now())
  updatedAt                            DateTime       @updatedAt
  Promotor                             Promotor?
  Review                               Review[]
  transactions                         transactions[]
  image                                Image?         @relation(fields: [imageId], references: [id])
  vouchers_vouchers_from_userIdTousers Voucher[]      @relation("vouchers_from_userIdTousers")
  Voucher                              Voucher[]

  @@index([username, email])
  @@index([imageId], map: "users_imageId_fkey")
  @@map("users")
}

model Promotor {
  id                  String   @id
  promotorImageId     String?
  userId              String   @unique
  promotorName        String   @unique
  promotorDescription String?
  balance             Decimal  @default(0.00) @db.Decimal(18, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  Event               Event[]
  promotorImage       Image?   @relation(fields: [promotorImageId], references: [id], onDelete: Restrict)
  user                User     @relation(fields: [userId], references: [id])

  @@index([promotorImageId], map: "promotors_promotorImageId_fkey")
  @@map("promotors")
}

model Image {
  id        String     @id
  blob      Bytes
  name      String?    @unique
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  Promotor  Promotor[]
  User      User[]
  Event     Event[]

  @@map("images")
}

model Event {
  id          String    @id
  promotorId  String
  imageId     String
  slug        String
  title       String    @unique
  startAt     DateTime  @map("start_at")
  endAt       DateTime  @map("end_at")
  city        String?    @db.VarChar(55)
  location    String?
  description String?
  category    String
  venueType   VenueType @map("venue_type")
  use_voucher Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  promotor    Promotor  @relation(fields: [promotorId], references: [id])
  eventImage  Image     @relation(fields: [imageId], references: [id])
  Review      Review[]
  tickets     tickets[]

  @@index([promotorId], map: "events_promotorId_fkey")
  @@map("events")
}

model Voucher {
  id                                String   @id
  userId                            String
  from_userId                       String
  transactionId                     String?
  isValid                           Boolean  @default(true)
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime @updatedAt
  users_vouchers_from_userIdTousers User     @relation("vouchers_from_userIdTousers", fields: [from_userId], references: [id])
  user                              User     @relation(fields: [userId], references: [id])

  @@unique([userId, from_userId], map: "user_referral_unique_combination_key")
  @@index([from_userId], map: "vouchers_from_userId_fkey")
  @@map("vouchers")
}

model Review {
  userId    String
  eventId   String
  rating    Decimal  @db.Decimal(2, 1)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, eventId])
  @@index([eventId], map: "reviews_eventId_fkey")
  @@map("reviews")
}

model tickets {
  id                String              @id
  eventId           String
  ticketType        tickets_ticketType? @default(reguler)
  price             Decimal             @default(0.00) @db.Decimal(18, 2)
  capacity          Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  events            Event               @relation(fields: [eventId], references: [id], map: "ticket_event_fkey")
  transaction_items transaction_items[]

  @@unique([eventId, ticketType], map: "event_ticket_unique_key")
}

model transaction_items {
  transactionId String
  ticketId      String
  quantity      Int          @default(0)
  price         Decimal      @default(0.00) @db.Decimal(18, 2)
  discount      Decimal      @default(0.00) @db.Decimal(18, 2)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  tickets       tickets      @relation(fields: [ticketId], references: [id], map: "transaction_items_ticket_fkey")
  transactions  transactions @relation(fields: [transactionId], references: [id])

  @@id([transactionId, ticketId])
  @@index([ticketId], map: "transaction_items_ticket_fkey")
}

model transactions {
  id                String              @id
  invoiceNuber      String
  userId            String
  totalPrice        Decimal             @default(0.00) @db.Decimal(18, 2)
  discountPoint     Decimal             @default(0.000000000000000000000000000000)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  status            transactions_status @default(PENDING)
  transaction_items transaction_items[]
  users             User                @relation(fields: [userId], references: [id])

  @@index([userId], map: "transactions_userId_fkey")
}

enum Gender {
  MALE
  FEMALE
}

enum VenueType {
  INDOOR
  OUTDOOR
}

enum tickets_ticketType {
  vip
  reguler
}

enum transactions_status {
  UNPAID
  PENDING
  SUCCESS
}
