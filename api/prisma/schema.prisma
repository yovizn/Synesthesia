generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id
  imageId     String?
  firstname   String
  lastname    String?
  username    String        @unique
  email       String        @unique
  password    String
  birth       DateTime?
  gender      Gender
  address     String?
  referral    String        @unique
  referrance  String?
  point       Int           @default(0)
  phoneNumber String?       @map("phone_number")
  expPoint    DateTime?     @map("exp_point")
  isVerified  Boolean       @default(false)
  isDelete    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Promotor    Promotor?
  Review      Review[]
  Transaction Transaction[]
  image       Image?        @relation(fields: [imageId], references: [id])
  Voucher     Voucher[]
  Carts       Carts[]

  @@index([username, email])
  @@index([imageId], map: "users_imageId_fkey")
  @@map("users")
}

model Promotor {
  id                  String   @id
  promotorImageId     String?
  userId              String   @unique
  promotorName        String   @unique
  promotorDescription String?
  balance             Decimal  @default(0.00) @db.Decimal(18, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  Event               Event[]
  promotorImage       Image?   @relation(fields: [promotorImageId], references: [id], onDelete: Restrict)
  user                User     @relation(fields: [userId], references: [id])

  @@index([promotorImageId], map: "promotors_promotorImageId_fkey")
  @@map("promotors")
}

model Image {
  id        String     @id
  blob      Bytes
  name      String?    @unique
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  Event     Event[]
  Promotor  Promotor[]
  User      User[]

  @@map("images")
}

model Event {
  id          String    @id
  posterId    String?
  promotorId  String
  slug        String
  title       String    @unique
  startAt     DateTime  @map("start_at")
  endAt       DateTime  @map("end_at")
  city        String    @db.VarChar(55)
  location    String?
  description String?   @db.LongText
  category    String
  venueType   VenueType
  useVoucher  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  poster      Image?    @relation(fields: [posterId], references: [id])
  promotor    Promotor  @relation(fields: [promotorId], references: [id])

  Transaction Transaction[]
  Review      Review[]
  Tickets     Tickets[]
  Carts       Carts[]

  @@index([posterId], map: "events_posterId_fkey")
  @@index([promotorId], map: "events_promotorId_fkey")
  @@map("events")
}

model Voucher {
  id            String        @id
  userId        String
  transactionId String?
  isValid       Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Transaction   Transaction[]
  user          User          @relation(fields: [userId], references: [id])

  @@index([userId], map: "vouchers_userId_fkey")
  @@map("vouchers")
}

model Transaction {
  id              String            @id
  invoiceNumber   String
  voucherId       String?
  eventId         String
  userId          String
  total           Decimal           @db.Decimal(18, 2)
  discountPoint   Decimal           @default(0.000000000000000000000000000000)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  status          StatusTransaction @default(PENDING)
  TransactionItem TransactionItem[]
  event           Event             @relation(fields: [eventId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  Voucher         Voucher?          @relation(fields: [voucherId], references: [id])

  @@index([eventId], map: "transacitons_eventId_fkey")
  @@index([userId], map: "transacitons_userId_fkey")
  @@index([voucherId], map: "transacitons_voucherId_fkey")
  @@map("transacitons")
}

model TransactionItem {
  transactionId String
  ticketsId     String
  price         Decimal     @db.Decimal(18, 2)
  quantity      Int         @default(0)
  discount      Decimal     @default(0.00) @db.Decimal(18, 2)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  ticket        Tickets     @relation(fields: [ticketsId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@id([transactionId, ticketsId])
  @@index([ticketsId], map: "transaciton_items_ticketsId_fkey")
  @@map("transaciton_items")
}

model Tickets {
  id              String            @id
  eventId         String
  price           Decimal           @db.Decimal(18, 2)
  type            TicketType        @default(REGULER)
  capacity        Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  event           Event             @relation(fields: [eventId], references: [id])
  TransactionItem TransactionItem[]
  Carts           Carts[]

  @@index([eventId], map: "tickets_eventId_fkey")
  @@map("tickets")
}

model Carts {
  userId    String
  ticketsId String
  eventId   String
  quantity  Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  users     User    @relation(fields: [userId], references: [id])
  tickets   Tickets @relation(fields: [ticketsId], references: [id])
  events    Event   @relation(fields: [eventId], references: [id])

  @@id([userId, ticketsId, eventId])
}

model Review {
  userId    String
  eventId   String
  rating    Decimal  @db.Decimal(2, 1)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, eventId])
  @@index([eventId], map: "reviews_eventId_fkey")
  @@map("reviews")
}

enum Gender {
  MALE
  FEMALE
}

enum VenueType {
  INDOOR
  OUTDOOR
}

enum TicketType {
  REGULER
  VIP
}

enum StatusTransaction {
  UNPAID
  PENDING
  SUCCESS
}
