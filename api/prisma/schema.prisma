// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id
  imageId     String?
  firstname   String
  lastname    String?
  username    String    @unique
  email       String    @unique
  password    String
  birth       DateTime?
  gender      Gender
  address     String?
  referral    String    @unique
  referrance  String?
  point       Int       @default(0)
  phoneNumber String?   @map("phone_number")
  expPoint    DateTime? @map("exp_point")
  isVerified  Boolean   @default(false)
  isDelete    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  image       Image?        @relation(fields: [imageId], references: [id])
  Promotor    Promotor?
  Review      Review[]
  Transaction Transaction[]
  Voucher     Voucher[]

  @@index([username, email])
  @@map("users")
}

model Promotor {
  id                  String   @id
  promotorImageId     String?
  userId              String   @unique
  promotorName        String   @unique
  promotorDescription String?
  balance             Decimal  @default(0) @db.Decimal(18, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  promotorImage Image?  @relation(fields: [promotorImageId], references: [id], onDelete: Restrict)
  user          User    @relation(fields: [userId], references: [id])
  Event         Event[]

  @@map("promotors")
}

model Image {
  id        String   @id
  blob      Bytes    @db.LongBlob
  name      String?  @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  User     User[]
  Promotor Promotor[]
  Event    Event[]

  @@map("images")
}

model Event {
  id          String    @id
  posterId    String?
  promotorId  String
  slug        String
  title       String    @unique
  startAt     DateTime  @map("start_at")
  endAt       DateTime  @map("end_at")
  city        String    @db.VarChar(55)
  location    String?
  description String?
  category    String
  venueType   VenueType
  useVoucher  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  poster      Image?    @relation(fields: [posterId], references: [id])
  promotor    Promotor      @relation(fields: [promotorId], references: [id])

  Transaction Transaction[]
  Review      Review[]
  Tickets     Tickets[]

  @@map("events")
}

model Voucher {
  id            String   @id
  userId        String
  transactionId String?
  isValid       Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id])
  Transaction Transaction[]

  @@map("vouchers")
}

model Transaction {
  id              String            @id
  invoiceNuber    String
  voucherId       String
  eventId         String
  userId          String
  total           Decimal           @db.Decimal(18, 2)
  discountPoint   Decimal           @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  status          StatusTransaction @default(PENDING)
  user            User              @relation(fields: [userId], references: [id])
  event           Event             @relation(fields: [eventId], references: [id])
  Voucher         Voucher           @relation(fields: [voucherId], references: [id])
  TransactionItem TransactionItem[]

  @@map("transacitons")
}

model Tickets {
  id        String     @id
  eventId   String
  price     Decimal    @db.Decimal(18, 2)
  type      TicketType @default(REGULER)
  capacity  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  event           Event             @relation(fields: [eventId], references: [id])
  TransactionItem TransactionItem[]

  @@map("tickets")
}

model TransactionItem {
  transactionId String
  ticketsId     String
  quantity      Int      @default(0)
  price         Decimal  @db.Decimal(18, 2)
  discount      Decimal  @default(0) @db.Decimal(18, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ticket      Tickets     @relation(fields: [ticketsId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@id([transactionId, ticketsId])
  @@map("transaciton_items")
}

model Review {
  userId    String
  eventId   String
  rating    Decimal  @db.Decimal(2, 1)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
  @@map("reviews")
}

enum Gender {
  MALE
  FEMALE
}

enum VenueType {
  INDOOR
  OUTDOOR
}

enum TicketType {
  REGULER
  VIP
}

enum StatusTransaction {
  UNPAID
  PENDING
  SUCCESS
}
